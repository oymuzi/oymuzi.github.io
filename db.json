{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/juejin.png","path":"images/juejin.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1562248252000},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1562248252000},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1562248252000},{"_id":"themes/icarus/_config.yml","hash":"93eef0ce9ab94473cd8ae0597e406239a5d71cbc","modified":1562927488858},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1562248252000},{"_id":"source/_posts/hello-world.md","hash":"ca3834bb3b51aa996d5cb57aa5c520c12f953eb5","modified":1562924656080},{"_id":"source/_posts/基于SVN提交代码自动打包.md","hash":"d0bf6d23f067fba9d1a9effcd4373b73f5a127f8","modified":1562924679927},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1562248252000},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1562248252000},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1562248252000},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1562248252000},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1562248252000},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1562248252000},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1562248252000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1562248252000},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1562248252000},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1562248252000},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1562248252000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1562248252000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1562248252000},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1562248252000},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1562248252000},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1562248252000},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1562248252000},{"_id":"themes/icarus/layout/layout.ejs","hash":"69e441c03ecf08016a13e8dd4d39633e3ada5310","modified":1562925259008},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1562248252000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1562248252000},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1562248252000},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1562248252000},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1562248252000},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1562248252000},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1562248252000},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1562248252000},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1562248252000},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1562248252000},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1562248252000},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1562248252000},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1562248252000},{"_id":"themes/icarus/includes/helpers/site.js","hash":"35dd41260dce178a171f6c360fa6d3840bfb1507","modified":1562248252000},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1562248252000},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1562248252000},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1562248252000},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1562248252000},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1562248252000},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1562248252000},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"28863042ad8fcf9ecb86d5288ecd3ce5250a984d","modified":1562248252000},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1562248252000},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1562248252000},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1562248252000},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1562248252000},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1562248252000},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1562248252000},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1562248252000},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1562248252000},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1562248252000},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1562248252000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1562248252000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1562248252000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1562248252000},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"8a9172d7c9a8f050dc978a06e0f0998ba2e9c61a","modified":1562248252000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"886026a36495f3c57cdef46bc9e9a94a0e390eb0","modified":1562248252000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1562248252000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1562248252000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1562248252000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1562248252000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"dc91946bfe2c25507927cffc7f97fb445e839462","modified":1562248252000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"6bedbb14d9e79b88b0010436e506d763709efa26","modified":1562248252000},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1562248252000},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1562248252000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1562248252000},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1562248252000},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1562248252000},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1562248252000},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1562248252000},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1562248252000},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1562248252000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1562248252000},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1562248252000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1562248252000},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1562248252000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1562248252000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1562248252000},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1562248252000},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1562248252000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1562248252000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1562248252000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1562248252000},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"ef66b06afb0c350901c7d55e091d1b2718540706","modified":1562248252000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1562248252000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1562248252000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1562248252000},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1562248252000},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1562248252000},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1562248252000},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1562248252000},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1562248252000},{"_id":"themes/icarus/source/css/style.styl","hash":"14d07e24e2effe13b53d6c29e750552fdb67bd82","modified":1562927227385},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1562248252000},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1562248252000},{"_id":"themes/icarus/source/images/juejin.png","hash":"70c54971ab8fe2427b19a3ac7d4d470d3b5a9078","modified":1562901146966},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1562248252000},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1562248252000},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1562248252000},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1562248252000},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1562248252000},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1562248252000},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1562248252000},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1562248252000},{"_id":"themes/icarus/source/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1562248252000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2019-05-04T09:55:23.000Z","toc":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-05-04 17:55:23\ntoc: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-07-12T09:44:16.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxzyop200000eqfygoor6dar","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"iOS-基于SVN提交代码自动打包","date":"2019-03-02T11:04:34.000Z","toc":true,"_content":"\n### 前言\n\n之前写过一篇[基于Jenkins和Fastlane自动打包](https://juejin.im/post/5ca8c81e6fb9a05e6668ab56)的文章，文中简述了很多的的环境搭建以及一些遇到的问题。这篇文章的目的是使用脚本和**Jenkins**来自动打包，为何不在使用之前的**Fastlane**呢？首先**Fastlane**是很不错的，也是使用**xcodebuild**命令来封装实现的，但是在使用过程中会涉及到一个脚本的迁移能力即运用到其他项目上，我认为是不算高的，至少在**Jenkins**上。反正**Fastlane**也是基于**xcodebuild**来进行编译打包的，那我们何不直接编写脚本进行打包呢？\n<!-- more -->\n\n还有一个问题就是大家都知道使用**Git**基于**Jenkins**的自动化打包可以直接在每次提交时实现自动打包，但是在**Jenkins**中使用**SVN**我们没有发现类似这个功能的插件。文中的解决办法是一种曲线救国的方法，在文章的下半部分会讲到。我一开始的构思还是想通过局域网来实现，但是越到后面发现行不通，没有感觉到自动打包带来的便利。**于是有了本文这个方案**。\n\n\n\n### 准备\n\n①请确保打包电脑的环境已经安装好了HomeBrew、Jenkins(建议使用brew安装Jenkins并进行开机自启动)\n\n②请确保打包电脑的要是串中有你需要打包的APP所需的证书、描述文件\n\n③请确保此打包脚本用于基于提交SVN和Jenkins环境中自动打包，否则将会导致脚本不可用的状态😂😂\n\n\n\n### 打包结构\n\n具体的结构可以参照下图，如果有其他的类型的打包，可以在Plist文件夹中添加新的plist文件，这个文件可以在手动打包时导出的文件夹里有xxxExportOptions.plist文件。然后在配置文件里面进行更改类型。\n\n![](http://cloud.minder.mypup.cn/blog/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n\n\n\n#### 前戏\n\n修改配置文件就能直接控制打包类型是不是很方便。一开始采用json文件来进行配置，使用json文件的话对我来说有两个缺点。其一就是json文件中无法进行注释，这会导致后面接手的人无法明白其意，或者需要在添加一个说明文档；其二是因为在使用json配置路径的时候还需要对值进行去除双引号，可以实现很麻烦。另外就是Shell解析json数据还是有点麻烦，使用jq解析挺方便就是得配置一下环境。其中global.config代码如下：\n\n```\n\n\t#是否需要打包\n\tis_need_package=true\n\n\t#生产环境/开发环境证书设置\n\tcode_sign_distribution=\"iPhone Distribution: xxxx xxx (xxx)\"\n\tcode_sign_development=\"iPhone Developer: xxxx xxxx (xxx)\"\n\n\t#项目的target/scheme设置 \n\tpackage_target_name=\"xxx\"\n\tpackage_scheme_name=\"xxx\"\n\n\t#打包结果根目录\n\tpackage_root_path=/Users/xxx/Desktop/Package/\n\t#打包ipa目录\n\tpackage_archive_path=/Users/xxx/Desktop/Package/Archive/\n\n\t#打包类型  AdHoc：1 AppStore：2  Enterprise：3  Development：4\n\tpackage_export_type=1\n\t#打包存放的xxxExportOptions.plist文件夹\n\tpackage_export_options_dir_path=./AutoPacking/Plist/\n\n\t#是否使用workspace进行打包\n\tpackage_use_workspace=true\n\t#是否使用Release模式进行打包\n\tpackage_use_release=true\n\n\t#记录打包前缀\n\trecord_perfix=\"CEG\"\n```\n\n\n\n是不是觉得很简单，但是阅读性不是很高吧， 在Xcode中没有高亮显示，都是一个色容易犯困。但是使用超级简单\n\n```\nsource global.config\n```\n\n是不是很简单，😀😀，只需要一个命令，即可获得全部的全局变量，$is_need_package就能获得值，路径也是，所以我选择了这种方式来进行做配置文件，对不同的人有不同的效果，对我不熟悉脚本的人真的太有好了。有个注意点就是一行只能写一个变量，并且变量和值之间只能有等于号，不能有空格号来进行对齐🤡🤡，是不是觉得连最后的美化机会都没有啦😏。其实习惯就好。🙂\n\n\n\n#### 后戏\n\n小伙子别盯着看标题哈，思想很危险哈😅，我不是来开车的，说完配置文件就该说说这个打包脚本了。还记得准备工作中说了要在**SVN**中吗，因为用到了Jenkins中全局构建参数**SVN_REVISION**,另外看这个脚本其实有点烦，因为很大部分代码是在做前戏工作😉😉，真正**xcodebuild**命令在末尾了。另外我写脚本喜欢都是小写，全大写的看着头痛啊， 所以我也不知道这符不符合脚本的代码规范吧，但是自我感觉良好😎😎。\n\n```\n#!/bin/sh\n\n# 当前shell所处的目录\nshell_dir_path=$(cd \"$(dirname \"$0\")\"; pwd)\n\n# 把配置文件里的参数在该脚本里全局化\nsource $shell_dir_path\"/global.config\"\n\necho \"开始检查环境...........\"\n\n# 如果归档文件夹不存在则创建\nif [ ! -d $package_root_path ]; then\n    mkdir -pv $package_root_path\nfi\n\n# 如果不存在记录文件则创建，存在文件则把文件内容变量加入到全局变量\nif [ -e $package_root_path\"result.txt\" ]; then\n    source $package_root_path\"result.txt\"\n    # 判断svn最后提交信息是否已经归档过，其中SVN_REVISION是SVN提交时的编号，改变量\n    # 是Jenkins提供的\n    if [ $lastestBuildVersion = $SVN_REVISION ] ; then\n        echo \"该版本已经打过包了，请重新提交一次记录并确保is_need_package为true\"\n        exit 1\n    else\n        # 为了节省空间，所以每次打包都会在开始前移除之前文件\n        rm -rf $package_archive_path*\n        echo \"移除旧项目完毕，准备工作已就绪\"\n    fi\nelse\n    # 创建记录文档\n    touch $package_root_path\"/result.txt\"\n    chmod -R 777 $package_root_path\"/result.txt\"\n    echo lastestBuildVersion=0 >> $package_root_path\"/result.txt\"\n\nfi\n\n# 检查是否需要打包\nif ! $is_need_package; then\n    exit 1\nfi\n\n# 检查是否设置target/scheme\nif test -z $package_target_name; then\n\techo \"❌ 项目Target设置为空\"\n\texit 1\nfi\n\nif test -z $package_scheme_name; then\n\techo \"❌ 项目Scheme设置为空\"\n\texit 1\nfi\n\n# 读取配置文件归档类型是Release还是Debug\nif $package_use_release; then\n    build_configuration=\"Release\"\nelse\n    build_configuration=\"Debug\"\nfi\n\n\n#  AdHoc: 1, AppStore: 2, Enterprise: 3, Development: 4\n# 导出ipa包的plist文件夹，该文件在打包时会生成\noptions_dir_path=$package_export_options_dir_path\nif [[ $package_export_type -eq 1 ]]; then\n    export_options_plist_path=$options_dir_path\"AdHocExportOptions.plist\"\n    export_type_name=\"AdHoc\"\nelif [[ $package_export_type -eq 2 ]]; then\n    export_options_plist_path=$options_dir_path\"AppStoreExportOptions.plist\"\n    export_type_name=\"AppStore\"\nelif [[ $package_export_type -eq 3 ]]; then\n    export_options_plist_path=$options_dir_path\"EnterpriseExportOptions.plist\"\n    export_type_name=\"Enterprise\"\nelif [[ $package_export_type -eq 4 ]]; then\n    export_options_plist_path=$options_dir_path\"DevelopmentExportOptions.plist\"\n    export_type_name=\"Development\"\nfi\n\necho \"✅✅✅ 校验参数以及环境成功\"\necho \"⚡️ ⚡️ ⚡️即将开始打包 ⚡️ ⚡️ ⚡️\"\n\n##############################自动打包部分##############################\n\n# 返回到工程目录\ncd ../\nproject_path=`pwd`\n\n# 获取项目名称\nproject_name=`find . -name *.xcodeproj | awk -F \"[/.]\" '{print $(NF-1)}'`\n# 指定工程的Info.plist\ncurrent_info_plist_name=\"Info.plist\"\n# 配置Info.plist的路径\ncurrent_info_plist_path=\"${project_name}/${current_info_plist_name}\"\n# 获取项目的版本号\nbundle_version=`/usr/libexec/PlistBuddy -c \"Print CFBundleShortVersionString\" ${current_info_plist_path}`\n# 获取项目的编译版本号\nbundle_build_version=`/usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" ${current_info_plist_path}`\n\n# 当前版本存放导出文件路径，可以根据需求添加不同的路径\ncurrentVersionArchivePath=\"${package_archive_path}\"\n\n# 判断归档当前版本文件夹是否存在，不存在则创建\nif [ ! -d $currentVersionArchivePath ]; then\n    mkdir -pv $currentVersionArchivePath\n    chmod -R 777 $currentVersionArchivePath\nfi\n\n# 归档文件路径\nexport_archive_path=\"${currentVersionArchivePath}${package_scheme_name}.xcarchive\"\n# ipa导出路径\nexport_ipa_path=\"${currentVersionArchivePath}\"\n# 获取时间 如:20190630_1420\n# current_date=\"$(date +%Y%m%d_%H%M)\"\n# ipa 名字, 可以根据版本号来进行重命名\nipa_name=\"${package_scheme_name}_${SVN_REVISION}.ipa\"\n\necho \"工程目录 = ${project_path}\"\necho \"工程Info.plist路径 = ${current_info_plist_path}\"\necho \"打包类型 = ${build_configuration}\"\necho \"打包使用的plist文件路径 = ${export_options_plist_path}\"\n\n###############################打包部分#########################################\n\necho \"🔆🔆🔆正在为您开始打包🚀🚀🚀🚀🚀🚀\"\n\n# 是否使用xxx.xcworkspace工程文件进行打包\nif $package_use_workspace; then\n\n    if [[ ${build_configuration} == \"Debug\" ]]; then\n        # 1. Clean\n        xcodebuild clean  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration}\n\n        # 2. Archive\n        xcodebuild archive  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    elif [[ ${build_configuration} == \"Release\" ]]; then\n\n        # 1. Clean\n        xcodebuild clean  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration}\n\n        # 2. Archive\n        xcodebuild archive  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    fi\n\nelse\n\n    if [[ ${build_configuration} == \"Debug\" ]] ; then\n        # 1. Clean\n        xcodebuild clean  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -alltargets\n\n        # 2. Archive\n        xcodebuild archive  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    elif [[ ${build_configuration} == \"Release\" ]]; then\n        # 1. Clean\n        xcodebuild clean  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -alltargets\n\n        # 2. Archive\n        xcodebuild archive  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    fi\nfi\n\n# 检查是否构建成功\n# 因为xxx.xcarchive 是一个文件夹不是一个文件\nif [ -d ${export_archive_path} ]; then\n    echo \"🚀 🚀 🚀 项目构建成功 🚀 🚀 🚀\"\nelse\n    echo \"⚠️ ⚠️ ⚠️ 项目构建失败 ⚠️ ⚠️ ⚠️\"\n    exit 1\nfi\n\necho \"开始导出ipa文件\"\n# 导出ipa文件\nxcodebuild -exportArchive -archivePath ${export_archive_path} \\\n-exportPath ${export_ipa_path} \\\n-destination generic/platform=ios \\\n-exportOptionsPlist ${export_options_plist_path} \\\n-allowProvisioningUpdates\n# 默认导出ipa文件路径\nexport_ipa_name=$export_ipa_path$package_scheme_name\".ipa\"\n\n# 判断是否有这个导出ipa文件\nif [ -e $export_ipa_name ]; then\n    # 更改名称为 scheme_version.ipa scheme名称为工程名称，version为svn最后提交的版本\n    mv $export_ipa_name $export_ipa_path$ipa_name\n    # 将当前版本设为已打包状态\n    echo lastestBuildVersion=$SVN_REVISION > $package_root_path\"result.txt\"\n    echo \"🎉 🎉 🎉 导出 ${ipa_name}.ipa 包成功 🎉 🎉 🎉\"\nelse\n    echo \"❌ ❌ ❌ 导出 ${ipa_name}.ipa 包失败 ❌ ❌ ❌\"\nfi\n\n# 输出打包总用时\necho \"本次打包总耗时: ${SECONDS}s\"\n```\n\n是不是有点头晕哇，我是头痛啊🤗🤗，玩过使用**Jenkins**脚本自动打包的人看完这个应该知道我的曲线救国方式了，有的同学肯定还在😳😳or🤔🤔。我们在**重头戏**中讲🤗🤗。\n\n\n\n### 重头戏\n\n看风格我就不是开车的人，因为开车哪来这么多前戏是吧？🤔🤔，开始剥丝抽茧啦。\n\n前面说到在**Jenkins**中没有类似**Git**这样的提交代码自动打包的钩子插件。而我们使用**Jenkins**的目的就是为了释放程序员的👐，留着更多时间干正事，如果不能实现提交自动打包那有无**Jenkins**都一样了，还不如自己写个脚本打包呢，是吧？如果是你你会怎么做呢？\n\n我们知道Jenkins有个定期执行任务的选项，我们只需填上参数：H/2 * * * *  然后就会每两分钟执行一次，是不是想说为啥不设置1分钟，我也想哇，**Jenkins**不让啊😞😞。但是总不能让这家伙每两分钟一直打吧，覆盖还好，但是每两分钟就有一个新的安装包上传至测试服务器也不好吧，感觉会被测试人员打屎😱😱。那么我们就需要解决这个打断打包的条件🤔。既不能在工程中设置，不然**Jenkins**每次执行任务就覆盖了，也就是只能在打包电脑上保存一个状态。那么很好解决啦，我们只需要在脚本中创建一个文件来记录上次打包的**SVN_REVISION**，就能让脚本读取文件记录判断是否已经打过包了，没有打过包才执行程序，否则退出程序。😉😉现在想想是不是很简单哇，然后就可以尽情的哒哒哒。\n\n\n\n使用FTP上传至测试服务器这部分该如何解决呢？因为涉及到可变参数，脚本那么差的我只能使用土办法，一招一招来，干到不服为止😁😁。这部分脚本是上面那长串代码的末尾后的代码。\n\n```\n############################上传部分#####################################\n\nfunction createUploadShell(){\n    touch upload.sh\n    chmod -R 777 upload.sh\n    echo \"cd ${package_archive_path}\" >> upload.sh\n    echo \"ftp -i -n -v << !\" >> upload.sh\n    echo \"open 117.xx.xxx.xxx\" >> upload.sh\n    echo \"user oymuzi xxxx\" >> upload.sh\n    echo \"cd ./${upload_dir_path}\" >> upload.sh\n    current_date=\"$(date +%Y%m%d%H%M%S)\"\n    ipa_new_name=$package_scheme_name\"_\"$current_date\".ipa\"\n    echo \"binary\" >> upload.sh\n    echo \"put ${upload_volumes_name}${package_archive_path}${ipa_name} ./${ipa_new_name}\" >> upload.sh\n    echo \"close\" >> upload.sh\n    echo \"bye\" >> upload.sh\n    echo \"!\" >> upload.sh\n}\n\ncd $package_archive_path\ncreateUploadShell\necho \"创建上传脚本成功\"\n\necho \"🚀 🚀 🚀 开始上传至云端  🚀 🚀 🚀\"\nsh upload.sh\necho \"上传至云端完成\"\n\nrm -f upload.sh\n```\n\n对，就是这么feel 倍爽，大佬可以自己进行更改脚本。其中一点就是使用FTP命令必须使用`ftp -i -n -v << !  你想要的执行的FTP命令  !`。至于上传公司服务器还是蒲公英等平台，这个可以根据各自公司的规则吧，自己进行修改哈。\n\n\n\n源码地址：[OMPackaging](<https://github.com/oymuzi/OMPackaging>)(注：此demo仅为了展示源码，按照源码和文章所说的办法设置环境即可正常打包)\n\n\n\n### 言归正传\n\n利用**Jenkins**的定死执行任务功能，在本地保存一个打包的状态，然后就能每次提交代码后进行自动打包，有1-2分钟的延迟，而且要执行打包必须确保配置文件中的`is_need_package`为true并提交一次代码。在上传至测试服务器，测试人员就能直接下载安装。这个方案虽然有些延迟，但是解决了自动打包的问题。\n\n\n\n\n\n参考：\n\n[Mac shell 上传文件(在shell中使用FTP命令)](https://blog.csdn.net/weixinyi21cn/article/details/79151620)\n\n[Building from the Command Line with Xcode FAQ](https://developer.apple.com/library/archive/technotes/tn2339/_index.html)\n\n","source":"_posts/基于SVN提交代码自动打包.md","raw":"---\ntitle: iOS-基于SVN提交代码自动打包\ndate: 2019-03-02 19:04:34\ntoc: true\n---\n\n### 前言\n\n之前写过一篇[基于Jenkins和Fastlane自动打包](https://juejin.im/post/5ca8c81e6fb9a05e6668ab56)的文章，文中简述了很多的的环境搭建以及一些遇到的问题。这篇文章的目的是使用脚本和**Jenkins**来自动打包，为何不在使用之前的**Fastlane**呢？首先**Fastlane**是很不错的，也是使用**xcodebuild**命令来封装实现的，但是在使用过程中会涉及到一个脚本的迁移能力即运用到其他项目上，我认为是不算高的，至少在**Jenkins**上。反正**Fastlane**也是基于**xcodebuild**来进行编译打包的，那我们何不直接编写脚本进行打包呢？\n<!-- more -->\n\n还有一个问题就是大家都知道使用**Git**基于**Jenkins**的自动化打包可以直接在每次提交时实现自动打包，但是在**Jenkins**中使用**SVN**我们没有发现类似这个功能的插件。文中的解决办法是一种曲线救国的方法，在文章的下半部分会讲到。我一开始的构思还是想通过局域网来实现，但是越到后面发现行不通，没有感觉到自动打包带来的便利。**于是有了本文这个方案**。\n\n\n\n### 准备\n\n①请确保打包电脑的环境已经安装好了HomeBrew、Jenkins(建议使用brew安装Jenkins并进行开机自启动)\n\n②请确保打包电脑的要是串中有你需要打包的APP所需的证书、描述文件\n\n③请确保此打包脚本用于基于提交SVN和Jenkins环境中自动打包，否则将会导致脚本不可用的状态😂😂\n\n\n\n### 打包结构\n\n具体的结构可以参照下图，如果有其他的类型的打包，可以在Plist文件夹中添加新的plist文件，这个文件可以在手动打包时导出的文件夹里有xxxExportOptions.plist文件。然后在配置文件里面进行更改类型。\n\n![](http://cloud.minder.mypup.cn/blog/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n\n\n\n#### 前戏\n\n修改配置文件就能直接控制打包类型是不是很方便。一开始采用json文件来进行配置，使用json文件的话对我来说有两个缺点。其一就是json文件中无法进行注释，这会导致后面接手的人无法明白其意，或者需要在添加一个说明文档；其二是因为在使用json配置路径的时候还需要对值进行去除双引号，可以实现很麻烦。另外就是Shell解析json数据还是有点麻烦，使用jq解析挺方便就是得配置一下环境。其中global.config代码如下：\n\n```\n\n\t#是否需要打包\n\tis_need_package=true\n\n\t#生产环境/开发环境证书设置\n\tcode_sign_distribution=\"iPhone Distribution: xxxx xxx (xxx)\"\n\tcode_sign_development=\"iPhone Developer: xxxx xxxx (xxx)\"\n\n\t#项目的target/scheme设置 \n\tpackage_target_name=\"xxx\"\n\tpackage_scheme_name=\"xxx\"\n\n\t#打包结果根目录\n\tpackage_root_path=/Users/xxx/Desktop/Package/\n\t#打包ipa目录\n\tpackage_archive_path=/Users/xxx/Desktop/Package/Archive/\n\n\t#打包类型  AdHoc：1 AppStore：2  Enterprise：3  Development：4\n\tpackage_export_type=1\n\t#打包存放的xxxExportOptions.plist文件夹\n\tpackage_export_options_dir_path=./AutoPacking/Plist/\n\n\t#是否使用workspace进行打包\n\tpackage_use_workspace=true\n\t#是否使用Release模式进行打包\n\tpackage_use_release=true\n\n\t#记录打包前缀\n\trecord_perfix=\"CEG\"\n```\n\n\n\n是不是觉得很简单，但是阅读性不是很高吧， 在Xcode中没有高亮显示，都是一个色容易犯困。但是使用超级简单\n\n```\nsource global.config\n```\n\n是不是很简单，😀😀，只需要一个命令，即可获得全部的全局变量，$is_need_package就能获得值，路径也是，所以我选择了这种方式来进行做配置文件，对不同的人有不同的效果，对我不熟悉脚本的人真的太有好了。有个注意点就是一行只能写一个变量，并且变量和值之间只能有等于号，不能有空格号来进行对齐🤡🤡，是不是觉得连最后的美化机会都没有啦😏。其实习惯就好。🙂\n\n\n\n#### 后戏\n\n小伙子别盯着看标题哈，思想很危险哈😅，我不是来开车的，说完配置文件就该说说这个打包脚本了。还记得准备工作中说了要在**SVN**中吗，因为用到了Jenkins中全局构建参数**SVN_REVISION**,另外看这个脚本其实有点烦，因为很大部分代码是在做前戏工作😉😉，真正**xcodebuild**命令在末尾了。另外我写脚本喜欢都是小写，全大写的看着头痛啊， 所以我也不知道这符不符合脚本的代码规范吧，但是自我感觉良好😎😎。\n\n```\n#!/bin/sh\n\n# 当前shell所处的目录\nshell_dir_path=$(cd \"$(dirname \"$0\")\"; pwd)\n\n# 把配置文件里的参数在该脚本里全局化\nsource $shell_dir_path\"/global.config\"\n\necho \"开始检查环境...........\"\n\n# 如果归档文件夹不存在则创建\nif [ ! -d $package_root_path ]; then\n    mkdir -pv $package_root_path\nfi\n\n# 如果不存在记录文件则创建，存在文件则把文件内容变量加入到全局变量\nif [ -e $package_root_path\"result.txt\" ]; then\n    source $package_root_path\"result.txt\"\n    # 判断svn最后提交信息是否已经归档过，其中SVN_REVISION是SVN提交时的编号，改变量\n    # 是Jenkins提供的\n    if [ $lastestBuildVersion = $SVN_REVISION ] ; then\n        echo \"该版本已经打过包了，请重新提交一次记录并确保is_need_package为true\"\n        exit 1\n    else\n        # 为了节省空间，所以每次打包都会在开始前移除之前文件\n        rm -rf $package_archive_path*\n        echo \"移除旧项目完毕，准备工作已就绪\"\n    fi\nelse\n    # 创建记录文档\n    touch $package_root_path\"/result.txt\"\n    chmod -R 777 $package_root_path\"/result.txt\"\n    echo lastestBuildVersion=0 >> $package_root_path\"/result.txt\"\n\nfi\n\n# 检查是否需要打包\nif ! $is_need_package; then\n    exit 1\nfi\n\n# 检查是否设置target/scheme\nif test -z $package_target_name; then\n\techo \"❌ 项目Target设置为空\"\n\texit 1\nfi\n\nif test -z $package_scheme_name; then\n\techo \"❌ 项目Scheme设置为空\"\n\texit 1\nfi\n\n# 读取配置文件归档类型是Release还是Debug\nif $package_use_release; then\n    build_configuration=\"Release\"\nelse\n    build_configuration=\"Debug\"\nfi\n\n\n#  AdHoc: 1, AppStore: 2, Enterprise: 3, Development: 4\n# 导出ipa包的plist文件夹，该文件在打包时会生成\noptions_dir_path=$package_export_options_dir_path\nif [[ $package_export_type -eq 1 ]]; then\n    export_options_plist_path=$options_dir_path\"AdHocExportOptions.plist\"\n    export_type_name=\"AdHoc\"\nelif [[ $package_export_type -eq 2 ]]; then\n    export_options_plist_path=$options_dir_path\"AppStoreExportOptions.plist\"\n    export_type_name=\"AppStore\"\nelif [[ $package_export_type -eq 3 ]]; then\n    export_options_plist_path=$options_dir_path\"EnterpriseExportOptions.plist\"\n    export_type_name=\"Enterprise\"\nelif [[ $package_export_type -eq 4 ]]; then\n    export_options_plist_path=$options_dir_path\"DevelopmentExportOptions.plist\"\n    export_type_name=\"Development\"\nfi\n\necho \"✅✅✅ 校验参数以及环境成功\"\necho \"⚡️ ⚡️ ⚡️即将开始打包 ⚡️ ⚡️ ⚡️\"\n\n##############################自动打包部分##############################\n\n# 返回到工程目录\ncd ../\nproject_path=`pwd`\n\n# 获取项目名称\nproject_name=`find . -name *.xcodeproj | awk -F \"[/.]\" '{print $(NF-1)}'`\n# 指定工程的Info.plist\ncurrent_info_plist_name=\"Info.plist\"\n# 配置Info.plist的路径\ncurrent_info_plist_path=\"${project_name}/${current_info_plist_name}\"\n# 获取项目的版本号\nbundle_version=`/usr/libexec/PlistBuddy -c \"Print CFBundleShortVersionString\" ${current_info_plist_path}`\n# 获取项目的编译版本号\nbundle_build_version=`/usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" ${current_info_plist_path}`\n\n# 当前版本存放导出文件路径，可以根据需求添加不同的路径\ncurrentVersionArchivePath=\"${package_archive_path}\"\n\n# 判断归档当前版本文件夹是否存在，不存在则创建\nif [ ! -d $currentVersionArchivePath ]; then\n    mkdir -pv $currentVersionArchivePath\n    chmod -R 777 $currentVersionArchivePath\nfi\n\n# 归档文件路径\nexport_archive_path=\"${currentVersionArchivePath}${package_scheme_name}.xcarchive\"\n# ipa导出路径\nexport_ipa_path=\"${currentVersionArchivePath}\"\n# 获取时间 如:20190630_1420\n# current_date=\"$(date +%Y%m%d_%H%M)\"\n# ipa 名字, 可以根据版本号来进行重命名\nipa_name=\"${package_scheme_name}_${SVN_REVISION}.ipa\"\n\necho \"工程目录 = ${project_path}\"\necho \"工程Info.plist路径 = ${current_info_plist_path}\"\necho \"打包类型 = ${build_configuration}\"\necho \"打包使用的plist文件路径 = ${export_options_plist_path}\"\n\n###############################打包部分#########################################\n\necho \"🔆🔆🔆正在为您开始打包🚀🚀🚀🚀🚀🚀\"\n\n# 是否使用xxx.xcworkspace工程文件进行打包\nif $package_use_workspace; then\n\n    if [[ ${build_configuration} == \"Debug\" ]]; then\n        # 1. Clean\n        xcodebuild clean  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration}\n\n        # 2. Archive\n        xcodebuild archive  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    elif [[ ${build_configuration} == \"Release\" ]]; then\n\n        # 1. Clean\n        xcodebuild clean  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration}\n\n        # 2. Archive\n        xcodebuild archive  -workspace ${project_name}.xcworkspace \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    fi\n\nelse\n\n    if [[ ${build_configuration} == \"Debug\" ]] ; then\n        # 1. Clean\n        xcodebuild clean  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -alltargets\n\n        # 2. Archive\n        xcodebuild archive  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    elif [[ ${build_configuration} == \"Release\" ]]; then\n        # 1. Clean\n        xcodebuild clean  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -alltargets\n\n        # 2. Archive\n        xcodebuild archive  -project ${project_name}.xcodeproj \\\n        -scheme ${package_scheme_name} \\\n        -configuration ${build_configuration} \\\n        -archivePath ${export_archive_path} \\\n        CFBundleVersion=${bundle_build_version} \\\n        -destination generic/platform=ios \\\n\n    fi\nfi\n\n# 检查是否构建成功\n# 因为xxx.xcarchive 是一个文件夹不是一个文件\nif [ -d ${export_archive_path} ]; then\n    echo \"🚀 🚀 🚀 项目构建成功 🚀 🚀 🚀\"\nelse\n    echo \"⚠️ ⚠️ ⚠️ 项目构建失败 ⚠️ ⚠️ ⚠️\"\n    exit 1\nfi\n\necho \"开始导出ipa文件\"\n# 导出ipa文件\nxcodebuild -exportArchive -archivePath ${export_archive_path} \\\n-exportPath ${export_ipa_path} \\\n-destination generic/platform=ios \\\n-exportOptionsPlist ${export_options_plist_path} \\\n-allowProvisioningUpdates\n# 默认导出ipa文件路径\nexport_ipa_name=$export_ipa_path$package_scheme_name\".ipa\"\n\n# 判断是否有这个导出ipa文件\nif [ -e $export_ipa_name ]; then\n    # 更改名称为 scheme_version.ipa scheme名称为工程名称，version为svn最后提交的版本\n    mv $export_ipa_name $export_ipa_path$ipa_name\n    # 将当前版本设为已打包状态\n    echo lastestBuildVersion=$SVN_REVISION > $package_root_path\"result.txt\"\n    echo \"🎉 🎉 🎉 导出 ${ipa_name}.ipa 包成功 🎉 🎉 🎉\"\nelse\n    echo \"❌ ❌ ❌ 导出 ${ipa_name}.ipa 包失败 ❌ ❌ ❌\"\nfi\n\n# 输出打包总用时\necho \"本次打包总耗时: ${SECONDS}s\"\n```\n\n是不是有点头晕哇，我是头痛啊🤗🤗，玩过使用**Jenkins**脚本自动打包的人看完这个应该知道我的曲线救国方式了，有的同学肯定还在😳😳or🤔🤔。我们在**重头戏**中讲🤗🤗。\n\n\n\n### 重头戏\n\n看风格我就不是开车的人，因为开车哪来这么多前戏是吧？🤔🤔，开始剥丝抽茧啦。\n\n前面说到在**Jenkins**中没有类似**Git**这样的提交代码自动打包的钩子插件。而我们使用**Jenkins**的目的就是为了释放程序员的👐，留着更多时间干正事，如果不能实现提交自动打包那有无**Jenkins**都一样了，还不如自己写个脚本打包呢，是吧？如果是你你会怎么做呢？\n\n我们知道Jenkins有个定期执行任务的选项，我们只需填上参数：H/2 * * * *  然后就会每两分钟执行一次，是不是想说为啥不设置1分钟，我也想哇，**Jenkins**不让啊😞😞。但是总不能让这家伙每两分钟一直打吧，覆盖还好，但是每两分钟就有一个新的安装包上传至测试服务器也不好吧，感觉会被测试人员打屎😱😱。那么我们就需要解决这个打断打包的条件🤔。既不能在工程中设置，不然**Jenkins**每次执行任务就覆盖了，也就是只能在打包电脑上保存一个状态。那么很好解决啦，我们只需要在脚本中创建一个文件来记录上次打包的**SVN_REVISION**，就能让脚本读取文件记录判断是否已经打过包了，没有打过包才执行程序，否则退出程序。😉😉现在想想是不是很简单哇，然后就可以尽情的哒哒哒。\n\n\n\n使用FTP上传至测试服务器这部分该如何解决呢？因为涉及到可变参数，脚本那么差的我只能使用土办法，一招一招来，干到不服为止😁😁。这部分脚本是上面那长串代码的末尾后的代码。\n\n```\n############################上传部分#####################################\n\nfunction createUploadShell(){\n    touch upload.sh\n    chmod -R 777 upload.sh\n    echo \"cd ${package_archive_path}\" >> upload.sh\n    echo \"ftp -i -n -v << !\" >> upload.sh\n    echo \"open 117.xx.xxx.xxx\" >> upload.sh\n    echo \"user oymuzi xxxx\" >> upload.sh\n    echo \"cd ./${upload_dir_path}\" >> upload.sh\n    current_date=\"$(date +%Y%m%d%H%M%S)\"\n    ipa_new_name=$package_scheme_name\"_\"$current_date\".ipa\"\n    echo \"binary\" >> upload.sh\n    echo \"put ${upload_volumes_name}${package_archive_path}${ipa_name} ./${ipa_new_name}\" >> upload.sh\n    echo \"close\" >> upload.sh\n    echo \"bye\" >> upload.sh\n    echo \"!\" >> upload.sh\n}\n\ncd $package_archive_path\ncreateUploadShell\necho \"创建上传脚本成功\"\n\necho \"🚀 🚀 🚀 开始上传至云端  🚀 🚀 🚀\"\nsh upload.sh\necho \"上传至云端完成\"\n\nrm -f upload.sh\n```\n\n对，就是这么feel 倍爽，大佬可以自己进行更改脚本。其中一点就是使用FTP命令必须使用`ftp -i -n -v << !  你想要的执行的FTP命令  !`。至于上传公司服务器还是蒲公英等平台，这个可以根据各自公司的规则吧，自己进行修改哈。\n\n\n\n源码地址：[OMPackaging](<https://github.com/oymuzi/OMPackaging>)(注：此demo仅为了展示源码，按照源码和文章所说的办法设置环境即可正常打包)\n\n\n\n### 言归正传\n\n利用**Jenkins**的定死执行任务功能，在本地保存一个打包的状态，然后就能每次提交代码后进行自动打包，有1-2分钟的延迟，而且要执行打包必须确保配置文件中的`is_need_package`为true并提交一次代码。在上传至测试服务器，测试人员就能直接下载安装。这个方案虽然有些延迟，但是解决了自动打包的问题。\n\n\n\n\n\n参考：\n\n[Mac shell 上传文件(在shell中使用FTP命令)](https://blog.csdn.net/weixinyi21cn/article/details/79151620)\n\n[Building from the Command Line with Xcode FAQ](https://developer.apple.com/library/archive/technotes/tn2339/_index.html)\n\n","slug":"基于SVN提交代码自动打包","published":1,"updated":"2019-07-12T09:44:39.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxzyop2n0001eqfys41wb78a","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前写过一篇<a href=\"https://juejin.im/post/5ca8c81e6fb9a05e6668ab56\" target=\"_blank\" rel=\"noopener\">基于Jenkins和Fastlane自动打包</a>的文章，文中简述了很多的的环境搭建以及一些遇到的问题。这篇文章的目的是使用脚本和<strong>Jenkins</strong>来自动打包，为何不在使用之前的<strong>Fastlane</strong>呢？首先<strong>Fastlane</strong>是很不错的，也是使用<strong>xcodebuild</strong>命令来封装实现的，但是在使用过程中会涉及到一个脚本的迁移能力即运用到其他项目上，我认为是不算高的，至少在<strong>Jenkins</strong>上。反正<strong>Fastlane</strong>也是基于<strong>xcodebuild</strong>来进行编译打包的，那我们何不直接编写脚本进行打包呢？</p>\n<a id=\"more\"></a>\n\n<p>还有一个问题就是大家都知道使用<strong>Git</strong>基于<strong>Jenkins</strong>的自动化打包可以直接在每次提交时实现自动打包，但是在<strong>Jenkins</strong>中使用<strong>SVN</strong>我们没有发现类似这个功能的插件。文中的解决办法是一种曲线救国的方法，在文章的下半部分会讲到。我一开始的构思还是想通过局域网来实现，但是越到后面发现行不通，没有感觉到自动打包带来的便利。<strong>于是有了本文这个方案</strong>。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>①请确保打包电脑的环境已经安装好了HomeBrew、Jenkins(建议使用brew安装Jenkins并进行开机自启动)</p>\n<p>②请确保打包电脑的要是串中有你需要打包的APP所需的证书、描述文件</p>\n<p>③请确保此打包脚本用于基于提交SVN和Jenkins环境中自动打包，否则将会导致脚本不可用的状态😂😂</p>\n<h3 id=\"打包结构\"><a href=\"#打包结构\" class=\"headerlink\" title=\"打包结构\"></a>打包结构</h3><p>具体的结构可以参照下图，如果有其他的类型的打包，可以在Plist文件夹中添加新的plist文件，这个文件可以在手动打包时导出的文件夹里有xxxExportOptions.plist文件。然后在配置文件里面进行更改类型。</p>\n<p><img src=\"http://cloud.minder.mypup.cn/blog/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt></p>\n<h4 id=\"前戏\"><a href=\"#前戏\" class=\"headerlink\" title=\"前戏\"></a>前戏</h4><p>修改配置文件就能直接控制打包类型是不是很方便。一开始采用json文件来进行配置，使用json文件的话对我来说有两个缺点。其一就是json文件中无法进行注释，这会导致后面接手的人无法明白其意，或者需要在添加一个说明文档；其二是因为在使用json配置路径的时候还需要对值进行去除双引号，可以实现很麻烦。另外就是Shell解析json数据还是有点麻烦，使用jq解析挺方便就是得配置一下环境。其中global.config代码如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#是否需要打包</span><br><span class=\"line\">is_need_package=true</span><br><span class=\"line\"></span><br><span class=\"line\">#生产环境/开发环境证书设置</span><br><span class=\"line\">code_sign_distribution=&quot;iPhone Distribution: xxxx xxx (xxx)&quot;</span><br><span class=\"line\">code_sign_development=&quot;iPhone Developer: xxxx xxxx (xxx)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#项目的target/scheme设置 </span><br><span class=\"line\">package_target_name=&quot;xxx&quot;</span><br><span class=\"line\">package_scheme_name=&quot;xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#打包结果根目录</span><br><span class=\"line\">package_root_path=/Users/xxx/Desktop/Package/</span><br><span class=\"line\">#打包ipa目录</span><br><span class=\"line\">package_archive_path=/Users/xxx/Desktop/Package/Archive/</span><br><span class=\"line\"></span><br><span class=\"line\">#打包类型  AdHoc：1 AppStore：2  Enterprise：3  Development：4</span><br><span class=\"line\">package_export_type=1</span><br><span class=\"line\">#打包存放的xxxExportOptions.plist文件夹</span><br><span class=\"line\">package_export_options_dir_path=./AutoPacking/Plist/</span><br><span class=\"line\"></span><br><span class=\"line\">#是否使用workspace进行打包</span><br><span class=\"line\">package_use_workspace=true</span><br><span class=\"line\">#是否使用Release模式进行打包</span><br><span class=\"line\">package_use_release=true</span><br><span class=\"line\"></span><br><span class=\"line\">#记录打包前缀</span><br><span class=\"line\">record_perfix=&quot;CEG&quot;</span><br></pre></td></tr></table></figure>\n\n<p>是不是觉得很简单，但是阅读性不是很高吧， 在Xcode中没有高亮显示，都是一个色容易犯困。但是使用超级简单</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source global.config</span><br></pre></td></tr></table></figure>\n\n<p>是不是很简单，😀😀，只需要一个命令，即可获得全部的全局变量，$is_need_package就能获得值，路径也是，所以我选择了这种方式来进行做配置文件，对不同的人有不同的效果，对我不熟悉脚本的人真的太有好了。有个注意点就是一行只能写一个变量，并且变量和值之间只能有等于号，不能有空格号来进行对齐🤡🤡，是不是觉得连最后的美化机会都没有啦😏。其实习惯就好。🙂</p>\n<h4 id=\"后戏\"><a href=\"#后戏\" class=\"headerlink\" title=\"后戏\"></a>后戏</h4><p>小伙子别盯着看标题哈，思想很危险哈😅，我不是来开车的，说完配置文件就该说说这个打包脚本了。还记得准备工作中说了要在<strong>SVN</strong>中吗，因为用到了Jenkins中全局构建参数<strong>SVN_REVISION</strong>,另外看这个脚本其实有点烦，因为很大部分代码是在做前戏工作😉😉，真正<strong>xcodebuild</strong>命令在末尾了。另外我写脚本喜欢都是小写，全大写的看着头痛啊， 所以我也不知道这符不符合脚本的代码规范吧，但是自我感觉良好😎😎。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前shell所处的目录</span><br><span class=\"line\">shell_dir_path=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"># 把配置文件里的参数在该脚本里全局化</span><br><span class=\"line\">source $shell_dir_path&quot;/global.config&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始检查环境...........&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果归档文件夹不存在则创建</span><br><span class=\"line\">if [ ! -d $package_root_path ]; then</span><br><span class=\"line\">    mkdir -pv $package_root_path</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果不存在记录文件则创建，存在文件则把文件内容变量加入到全局变量</span><br><span class=\"line\">if [ -e $package_root_path&quot;result.txt&quot; ]; then</span><br><span class=\"line\">    source $package_root_path&quot;result.txt&quot;</span><br><span class=\"line\">    # 判断svn最后提交信息是否已经归档过，其中SVN_REVISION是SVN提交时的编号，改变量</span><br><span class=\"line\">    # 是Jenkins提供的</span><br><span class=\"line\">    if [ $lastestBuildVersion = $SVN_REVISION ] ; then</span><br><span class=\"line\">        echo &quot;该版本已经打过包了，请重新提交一次记录并确保is_need_package为true&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    else</span><br><span class=\"line\">        # 为了节省空间，所以每次打包都会在开始前移除之前文件</span><br><span class=\"line\">        rm -rf $package_archive_path*</span><br><span class=\"line\">        echo &quot;移除旧项目完毕，准备工作已就绪&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">else</span><br><span class=\"line\">    # 创建记录文档</span><br><span class=\"line\">    touch $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\">    chmod -R 777 $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\">    echo lastestBuildVersion=0 &gt;&gt; $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否需要打包</span><br><span class=\"line\">if ! $is_need_package; then</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否设置target/scheme</span><br><span class=\"line\">if test -z $package_target_name; then</span><br><span class=\"line\">\techo &quot;❌ 项目Target设置为空&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if test -z $package_scheme_name; then</span><br><span class=\"line\">\techo &quot;❌ 项目Scheme设置为空&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取配置文件归档类型是Release还是Debug</span><br><span class=\"line\">if $package_use_release; then</span><br><span class=\"line\">    build_configuration=&quot;Release&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    build_configuration=&quot;Debug&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#  AdHoc: 1, AppStore: 2, Enterprise: 3, Development: 4</span><br><span class=\"line\"># 导出ipa包的plist文件夹，该文件在打包时会生成</span><br><span class=\"line\">options_dir_path=$package_export_options_dir_path</span><br><span class=\"line\">if [[ $package_export_type -eq 1 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;AdHocExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;AdHoc&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 2 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;AppStoreExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;AppStore&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 3 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;EnterpriseExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;Enterprise&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 4 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;DevelopmentExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;Development&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;✅✅✅ 校验参数以及环境成功&quot;</span><br><span class=\"line\">echo &quot;⚡️ ⚡️ ⚡️即将开始打包 ⚡️ ⚡️ ⚡️&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">##############################自动打包部分##############################</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回到工程目录</span><br><span class=\"line\">cd ../</span><br><span class=\"line\">project_path=`pwd`</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取项目名称</span><br><span class=\"line\">project_name=`find . -name *.xcodeproj | awk -F &quot;[/.]&quot; &apos;&#123;print $(NF-1)&#125;&apos;`</span><br><span class=\"line\"># 指定工程的Info.plist</span><br><span class=\"line\">current_info_plist_name=&quot;Info.plist&quot;</span><br><span class=\"line\"># 配置Info.plist的路径</span><br><span class=\"line\">current_info_plist_path=&quot;$&#123;project_name&#125;/$&#123;current_info_plist_name&#125;&quot;</span><br><span class=\"line\"># 获取项目的版本号</span><br><span class=\"line\">bundle_version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; $&#123;current_info_plist_path&#125;`</span><br><span class=\"line\"># 获取项目的编译版本号</span><br><span class=\"line\">bundle_build_version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; $&#123;current_info_plist_path&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前版本存放导出文件路径，可以根据需求添加不同的路径</span><br><span class=\"line\">currentVersionArchivePath=&quot;$&#123;package_archive_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断归档当前版本文件夹是否存在，不存在则创建</span><br><span class=\"line\">if [ ! -d $currentVersionArchivePath ]; then</span><br><span class=\"line\">    mkdir -pv $currentVersionArchivePath</span><br><span class=\"line\">    chmod -R 777 $currentVersionArchivePath</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档文件路径</span><br><span class=\"line\">export_archive_path=&quot;$&#123;currentVersionArchivePath&#125;$&#123;package_scheme_name&#125;.xcarchive&quot;</span><br><span class=\"line\"># ipa导出路径</span><br><span class=\"line\">export_ipa_path=&quot;$&#123;currentVersionArchivePath&#125;&quot;</span><br><span class=\"line\"># 获取时间 如:20190630_1420</span><br><span class=\"line\"># current_date=&quot;$(date +%Y%m%d_%H%M)&quot;</span><br><span class=\"line\"># ipa 名字, 可以根据版本号来进行重命名</span><br><span class=\"line\">ipa_name=&quot;$&#123;package_scheme_name&#125;_$&#123;SVN_REVISION&#125;.ipa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;工程目录 = $&#123;project_path&#125;&quot;</span><br><span class=\"line\">echo &quot;工程Info.plist路径 = $&#123;current_info_plist_path&#125;&quot;</span><br><span class=\"line\">echo &quot;打包类型 = $&#123;build_configuration&#125;&quot;</span><br><span class=\"line\">echo &quot;打包使用的plist文件路径 = $&#123;export_options_plist_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">###############################打包部分#########################################</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;🔆🔆🔆正在为您开始打包🚀🚀🚀🚀🚀🚀&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否使用xxx.xcworkspace工程文件进行打包</span><br><span class=\"line\">if $package_use_workspace; then</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ $&#123;build_configuration&#125; == &quot;Debug&quot; ]]; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    elif [[ $&#123;build_configuration&#125; == &quot;Release&quot; ]]; then</span><br><span class=\"line\"></span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ $&#123;build_configuration&#125; == &quot;Debug&quot; ]] ; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    elif [[ $&#123;build_configuration&#125; == &quot;Release&quot; ]]; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否构建成功</span><br><span class=\"line\"># 因为xxx.xcarchive 是一个文件夹不是一个文件</span><br><span class=\"line\">if [ -d $&#123;export_archive_path&#125; ]; then</span><br><span class=\"line\">    echo &quot;🚀 🚀 🚀 项目构建成功 🚀 🚀 🚀&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;⚠️ ⚠️ ⚠️ 项目构建失败 ⚠️ ⚠️ ⚠️&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始导出ipa文件&quot;</span><br><span class=\"line\"># 导出ipa文件</span><br><span class=\"line\">xcodebuild -exportArchive -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">-exportPath $&#123;export_ipa_path&#125; \\</span><br><span class=\"line\">-destination generic/platform=ios \\</span><br><span class=\"line\">-exportOptionsPlist $&#123;export_options_plist_path&#125; \\</span><br><span class=\"line\">-allowProvisioningUpdates</span><br><span class=\"line\"># 默认导出ipa文件路径</span><br><span class=\"line\">export_ipa_name=$export_ipa_path$package_scheme_name&quot;.ipa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断是否有这个导出ipa文件</span><br><span class=\"line\">if [ -e $export_ipa_name ]; then</span><br><span class=\"line\">    # 更改名称为 scheme_version.ipa scheme名称为工程名称，version为svn最后提交的版本</span><br><span class=\"line\">    mv $export_ipa_name $export_ipa_path$ipa_name</span><br><span class=\"line\">    # 将当前版本设为已打包状态</span><br><span class=\"line\">    echo lastestBuildVersion=$SVN_REVISION &gt; $package_root_path&quot;result.txt&quot;</span><br><span class=\"line\">    echo &quot;🎉 🎉 🎉 导出 $&#123;ipa_name&#125;.ipa 包成功 🎉 🎉 🎉&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;❌ ❌ ❌ 导出 $&#123;ipa_name&#125;.ipa 包失败 ❌ ❌ ❌&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出打包总用时</span><br><span class=\"line\">echo &quot;本次打包总耗时: $&#123;SECONDS&#125;s&quot;</span><br></pre></td></tr></table></figure>\n\n<p>是不是有点头晕哇，我是头痛啊🤗🤗，玩过使用<strong>Jenkins</strong>脚本自动打包的人看完这个应该知道我的曲线救国方式了，有的同学肯定还在😳😳or🤔🤔。我们在<strong>重头戏</strong>中讲🤗🤗。</p>\n<h3 id=\"重头戏\"><a href=\"#重头戏\" class=\"headerlink\" title=\"重头戏\"></a>重头戏</h3><p>看风格我就不是开车的人，因为开车哪来这么多前戏是吧？🤔🤔，开始剥丝抽茧啦。</p>\n<p>前面说到在<strong>Jenkins</strong>中没有类似<strong>Git</strong>这样的提交代码自动打包的钩子插件。而我们使用<strong>Jenkins</strong>的目的就是为了释放程序员的👐，留着更多时间干正事，如果不能实现提交自动打包那有无<strong>Jenkins</strong>都一样了，还不如自己写个脚本打包呢，是吧？如果是你你会怎么做呢？</p>\n<p>我们知道Jenkins有个定期执行任务的选项，我们只需填上参数：H/2 * * * *  然后就会每两分钟执行一次，是不是想说为啥不设置1分钟，我也想哇，<strong>Jenkins</strong>不让啊😞😞。但是总不能让这家伙每两分钟一直打吧，覆盖还好，但是每两分钟就有一个新的安装包上传至测试服务器也不好吧，感觉会被测试人员打屎😱😱。那么我们就需要解决这个打断打包的条件🤔。既不能在工程中设置，不然<strong>Jenkins</strong>每次执行任务就覆盖了，也就是只能在打包电脑上保存一个状态。那么很好解决啦，我们只需要在脚本中创建一个文件来记录上次打包的<strong>SVN_REVISION</strong>，就能让脚本读取文件记录判断是否已经打过包了，没有打过包才执行程序，否则退出程序。😉😉现在想想是不是很简单哇，然后就可以尽情的哒哒哒。</p>\n<p>使用FTP上传至测试服务器这部分该如何解决呢？因为涉及到可变参数，脚本那么差的我只能使用土办法，一招一招来，干到不服为止😁😁。这部分脚本是上面那长串代码的末尾后的代码。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">############################上传部分#####################################</span><br><span class=\"line\"></span><br><span class=\"line\">function createUploadShell()&#123;</span><br><span class=\"line\">    touch upload.sh</span><br><span class=\"line\">    chmod -R 777 upload.sh</span><br><span class=\"line\">    echo &quot;cd $&#123;package_archive_path&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;ftp -i -n -v &lt;&lt; !&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;open 117.xx.xxx.xxx&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;user oymuzi xxxx&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;cd ./$&#123;upload_dir_path&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    current_date=&quot;$(date +%Y%m%d%H%M%S)&quot;</span><br><span class=\"line\">    ipa_new_name=$package_scheme_name&quot;_&quot;$current_date&quot;.ipa&quot;</span><br><span class=\"line\">    echo &quot;binary&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;put $&#123;upload_volumes_name&#125;$&#123;package_archive_path&#125;$&#123;ipa_name&#125; ./$&#123;ipa_new_name&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;close&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;bye&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;!&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $package_archive_path</span><br><span class=\"line\">createUploadShell</span><br><span class=\"line\">echo &quot;创建上传脚本成功&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;🚀 🚀 🚀 开始上传至云端  🚀 🚀 🚀&quot;</span><br><span class=\"line\">sh upload.sh</span><br><span class=\"line\">echo &quot;上传至云端完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f upload.sh</span><br></pre></td></tr></table></figure>\n\n<p>对，就是这么feel 倍爽，大佬可以自己进行更改脚本。其中一点就是使用FTP命令必须使用<code>ftp -i -n -v &lt;&lt; !  你想要的执行的FTP命令  !</code>。至于上传公司服务器还是蒲公英等平台，这个可以根据各自公司的规则吧，自己进行修改哈。</p>\n<p>源码地址：<a href=\"https://github.com/oymuzi/OMPackaging\" target=\"_blank\" rel=\"noopener\">OMPackaging</a>(注：此demo仅为了展示源码，按照源码和文章所说的办法设置环境即可正常打包)</p>\n<h3 id=\"言归正传\"><a href=\"#言归正传\" class=\"headerlink\" title=\"言归正传\"></a>言归正传</h3><p>利用<strong>Jenkins</strong>的定死执行任务功能，在本地保存一个打包的状态，然后就能每次提交代码后进行自动打包，有1-2分钟的延迟，而且要执行打包必须确保配置文件中的<code>is_need_package</code>为true并提交一次代码。在上传至测试服务器，测试人员就能直接下载安装。这个方案虽然有些延迟，但是解决了自动打包的问题。</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixinyi21cn/article/details/79151620\" target=\"_blank\" rel=\"noopener\">Mac shell 上传文件(在shell中使用FTP命令)</a></p>\n<p><a href=\"https://developer.apple.com/library/archive/technotes/tn2339/_index.html\" target=\"_blank\" rel=\"noopener\">Building from the Command Line with Xcode FAQ</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前写过一篇<a href=\"https://juejin.im/post/5ca8c81e6fb9a05e6668ab56\" target=\"_blank\" rel=\"noopener\">基于Jenkins和Fastlane自动打包</a>的文章，文中简述了很多的的环境搭建以及一些遇到的问题。这篇文章的目的是使用脚本和<strong>Jenkins</strong>来自动打包，为何不在使用之前的<strong>Fastlane</strong>呢？首先<strong>Fastlane</strong>是很不错的，也是使用<strong>xcodebuild</strong>命令来封装实现的，但是在使用过程中会涉及到一个脚本的迁移能力即运用到其他项目上，我认为是不算高的，至少在<strong>Jenkins</strong>上。反正<strong>Fastlane</strong>也是基于<strong>xcodebuild</strong>来进行编译打包的，那我们何不直接编写脚本进行打包呢？</p>","more":"<p>还有一个问题就是大家都知道使用<strong>Git</strong>基于<strong>Jenkins</strong>的自动化打包可以直接在每次提交时实现自动打包，但是在<strong>Jenkins</strong>中使用<strong>SVN</strong>我们没有发现类似这个功能的插件。文中的解决办法是一种曲线救国的方法，在文章的下半部分会讲到。我一开始的构思还是想通过局域网来实现，但是越到后面发现行不通，没有感觉到自动打包带来的便利。<strong>于是有了本文这个方案</strong>。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>①请确保打包电脑的环境已经安装好了HomeBrew、Jenkins(建议使用brew安装Jenkins并进行开机自启动)</p>\n<p>②请确保打包电脑的要是串中有你需要打包的APP所需的证书、描述文件</p>\n<p>③请确保此打包脚本用于基于提交SVN和Jenkins环境中自动打包，否则将会导致脚本不可用的状态😂😂</p>\n<h3 id=\"打包结构\"><a href=\"#打包结构\" class=\"headerlink\" title=\"打包结构\"></a>打包结构</h3><p>具体的结构可以参照下图，如果有其他的类型的打包，可以在Plist文件夹中添加新的plist文件，这个文件可以在手动打包时导出的文件夹里有xxxExportOptions.plist文件。然后在配置文件里面进行更改类型。</p>\n<p><img src=\"http://cloud.minder.mypup.cn/blog/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt></p>\n<h4 id=\"前戏\"><a href=\"#前戏\" class=\"headerlink\" title=\"前戏\"></a>前戏</h4><p>修改配置文件就能直接控制打包类型是不是很方便。一开始采用json文件来进行配置，使用json文件的话对我来说有两个缺点。其一就是json文件中无法进行注释，这会导致后面接手的人无法明白其意，或者需要在添加一个说明文档；其二是因为在使用json配置路径的时候还需要对值进行去除双引号，可以实现很麻烦。另外就是Shell解析json数据还是有点麻烦，使用jq解析挺方便就是得配置一下环境。其中global.config代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#是否需要打包</span><br><span class=\"line\">is_need_package=true</span><br><span class=\"line\"></span><br><span class=\"line\">#生产环境/开发环境证书设置</span><br><span class=\"line\">code_sign_distribution=&quot;iPhone Distribution: xxxx xxx (xxx)&quot;</span><br><span class=\"line\">code_sign_development=&quot;iPhone Developer: xxxx xxxx (xxx)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#项目的target/scheme设置 </span><br><span class=\"line\">package_target_name=&quot;xxx&quot;</span><br><span class=\"line\">package_scheme_name=&quot;xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#打包结果根目录</span><br><span class=\"line\">package_root_path=/Users/xxx/Desktop/Package/</span><br><span class=\"line\">#打包ipa目录</span><br><span class=\"line\">package_archive_path=/Users/xxx/Desktop/Package/Archive/</span><br><span class=\"line\"></span><br><span class=\"line\">#打包类型  AdHoc：1 AppStore：2  Enterprise：3  Development：4</span><br><span class=\"line\">package_export_type=1</span><br><span class=\"line\">#打包存放的xxxExportOptions.plist文件夹</span><br><span class=\"line\">package_export_options_dir_path=./AutoPacking/Plist/</span><br><span class=\"line\"></span><br><span class=\"line\">#是否使用workspace进行打包</span><br><span class=\"line\">package_use_workspace=true</span><br><span class=\"line\">#是否使用Release模式进行打包</span><br><span class=\"line\">package_use_release=true</span><br><span class=\"line\"></span><br><span class=\"line\">#记录打包前缀</span><br><span class=\"line\">record_perfix=&quot;CEG&quot;</span><br></pre></td></tr></table></figure>\n\n<p>是不是觉得很简单，但是阅读性不是很高吧， 在Xcode中没有高亮显示，都是一个色容易犯困。但是使用超级简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source global.config</span><br></pre></td></tr></table></figure>\n\n<p>是不是很简单，😀😀，只需要一个命令，即可获得全部的全局变量，$is_need_package就能获得值，路径也是，所以我选择了这种方式来进行做配置文件，对不同的人有不同的效果，对我不熟悉脚本的人真的太有好了。有个注意点就是一行只能写一个变量，并且变量和值之间只能有等于号，不能有空格号来进行对齐🤡🤡，是不是觉得连最后的美化机会都没有啦😏。其实习惯就好。🙂</p>\n<h4 id=\"后戏\"><a href=\"#后戏\" class=\"headerlink\" title=\"后戏\"></a>后戏</h4><p>小伙子别盯着看标题哈，思想很危险哈😅，我不是来开车的，说完配置文件就该说说这个打包脚本了。还记得准备工作中说了要在<strong>SVN</strong>中吗，因为用到了Jenkins中全局构建参数<strong>SVN_REVISION</strong>,另外看这个脚本其实有点烦，因为很大部分代码是在做前戏工作😉😉，真正<strong>xcodebuild</strong>命令在末尾了。另外我写脚本喜欢都是小写，全大写的看着头痛啊， 所以我也不知道这符不符合脚本的代码规范吧，但是自我感觉良好😎😎。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前shell所处的目录</span><br><span class=\"line\">shell_dir_path=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"># 把配置文件里的参数在该脚本里全局化</span><br><span class=\"line\">source $shell_dir_path&quot;/global.config&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始检查环境...........&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果归档文件夹不存在则创建</span><br><span class=\"line\">if [ ! -d $package_root_path ]; then</span><br><span class=\"line\">    mkdir -pv $package_root_path</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果不存在记录文件则创建，存在文件则把文件内容变量加入到全局变量</span><br><span class=\"line\">if [ -e $package_root_path&quot;result.txt&quot; ]; then</span><br><span class=\"line\">    source $package_root_path&quot;result.txt&quot;</span><br><span class=\"line\">    # 判断svn最后提交信息是否已经归档过，其中SVN_REVISION是SVN提交时的编号，改变量</span><br><span class=\"line\">    # 是Jenkins提供的</span><br><span class=\"line\">    if [ $lastestBuildVersion = $SVN_REVISION ] ; then</span><br><span class=\"line\">        echo &quot;该版本已经打过包了，请重新提交一次记录并确保is_need_package为true&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    else</span><br><span class=\"line\">        # 为了节省空间，所以每次打包都会在开始前移除之前文件</span><br><span class=\"line\">        rm -rf $package_archive_path*</span><br><span class=\"line\">        echo &quot;移除旧项目完毕，准备工作已就绪&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">else</span><br><span class=\"line\">    # 创建记录文档</span><br><span class=\"line\">    touch $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\">    chmod -R 777 $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\">    echo lastestBuildVersion=0 &gt;&gt; $package_root_path&quot;/result.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否需要打包</span><br><span class=\"line\">if ! $is_need_package; then</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否设置target/scheme</span><br><span class=\"line\">if test -z $package_target_name; then</span><br><span class=\"line\">\techo &quot;❌ 项目Target设置为空&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if test -z $package_scheme_name; then</span><br><span class=\"line\">\techo &quot;❌ 项目Scheme设置为空&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取配置文件归档类型是Release还是Debug</span><br><span class=\"line\">if $package_use_release; then</span><br><span class=\"line\">    build_configuration=&quot;Release&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    build_configuration=&quot;Debug&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#  AdHoc: 1, AppStore: 2, Enterprise: 3, Development: 4</span><br><span class=\"line\"># 导出ipa包的plist文件夹，该文件在打包时会生成</span><br><span class=\"line\">options_dir_path=$package_export_options_dir_path</span><br><span class=\"line\">if [[ $package_export_type -eq 1 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;AdHocExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;AdHoc&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 2 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;AppStoreExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;AppStore&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 3 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;EnterpriseExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;Enterprise&quot;</span><br><span class=\"line\">elif [[ $package_export_type -eq 4 ]]; then</span><br><span class=\"line\">    export_options_plist_path=$options_dir_path&quot;DevelopmentExportOptions.plist&quot;</span><br><span class=\"line\">    export_type_name=&quot;Development&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;✅✅✅ 校验参数以及环境成功&quot;</span><br><span class=\"line\">echo &quot;⚡️ ⚡️ ⚡️即将开始打包 ⚡️ ⚡️ ⚡️&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">##############################自动打包部分##############################</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回到工程目录</span><br><span class=\"line\">cd ../</span><br><span class=\"line\">project_path=`pwd`</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取项目名称</span><br><span class=\"line\">project_name=`find . -name *.xcodeproj | awk -F &quot;[/.]&quot; &apos;&#123;print $(NF-1)&#125;&apos;`</span><br><span class=\"line\"># 指定工程的Info.plist</span><br><span class=\"line\">current_info_plist_name=&quot;Info.plist&quot;</span><br><span class=\"line\"># 配置Info.plist的路径</span><br><span class=\"line\">current_info_plist_path=&quot;$&#123;project_name&#125;/$&#123;current_info_plist_name&#125;&quot;</span><br><span class=\"line\"># 获取项目的版本号</span><br><span class=\"line\">bundle_version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; $&#123;current_info_plist_path&#125;`</span><br><span class=\"line\"># 获取项目的编译版本号</span><br><span class=\"line\">bundle_build_version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; $&#123;current_info_plist_path&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前版本存放导出文件路径，可以根据需求添加不同的路径</span><br><span class=\"line\">currentVersionArchivePath=&quot;$&#123;package_archive_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断归档当前版本文件夹是否存在，不存在则创建</span><br><span class=\"line\">if [ ! -d $currentVersionArchivePath ]; then</span><br><span class=\"line\">    mkdir -pv $currentVersionArchivePath</span><br><span class=\"line\">    chmod -R 777 $currentVersionArchivePath</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 归档文件路径</span><br><span class=\"line\">export_archive_path=&quot;$&#123;currentVersionArchivePath&#125;$&#123;package_scheme_name&#125;.xcarchive&quot;</span><br><span class=\"line\"># ipa导出路径</span><br><span class=\"line\">export_ipa_path=&quot;$&#123;currentVersionArchivePath&#125;&quot;</span><br><span class=\"line\"># 获取时间 如:20190630_1420</span><br><span class=\"line\"># current_date=&quot;$(date +%Y%m%d_%H%M)&quot;</span><br><span class=\"line\"># ipa 名字, 可以根据版本号来进行重命名</span><br><span class=\"line\">ipa_name=&quot;$&#123;package_scheme_name&#125;_$&#123;SVN_REVISION&#125;.ipa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;工程目录 = $&#123;project_path&#125;&quot;</span><br><span class=\"line\">echo &quot;工程Info.plist路径 = $&#123;current_info_plist_path&#125;&quot;</span><br><span class=\"line\">echo &quot;打包类型 = $&#123;build_configuration&#125;&quot;</span><br><span class=\"line\">echo &quot;打包使用的plist文件路径 = $&#123;export_options_plist_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">###############################打包部分#########################################</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;🔆🔆🔆正在为您开始打包🚀🚀🚀🚀🚀🚀&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否使用xxx.xcworkspace工程文件进行打包</span><br><span class=\"line\">if $package_use_workspace; then</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ $&#123;build_configuration&#125; == &quot;Debug&quot; ]]; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    elif [[ $&#123;build_configuration&#125; == &quot;Release&quot; ]]; then</span><br><span class=\"line\"></span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -workspace $&#123;project_name&#125;.xcworkspace \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ $&#123;build_configuration&#125; == &quot;Debug&quot; ]] ; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    elif [[ $&#123;build_configuration&#125; == &quot;Release&quot; ]]; then</span><br><span class=\"line\">        # 1. Clean</span><br><span class=\"line\">        xcodebuild clean  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. Archive</span><br><span class=\"line\">        xcodebuild archive  -project $&#123;project_name&#125;.xcodeproj \\</span><br><span class=\"line\">        -scheme $&#123;package_scheme_name&#125; \\</span><br><span class=\"line\">        -configuration $&#123;build_configuration&#125; \\</span><br><span class=\"line\">        -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">        CFBundleVersion=$&#123;bundle_build_version&#125; \\</span><br><span class=\"line\">        -destination generic/platform=ios \\</span><br><span class=\"line\"></span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查是否构建成功</span><br><span class=\"line\"># 因为xxx.xcarchive 是一个文件夹不是一个文件</span><br><span class=\"line\">if [ -d $&#123;export_archive_path&#125; ]; then</span><br><span class=\"line\">    echo &quot;🚀 🚀 🚀 项目构建成功 🚀 🚀 🚀&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;⚠️ ⚠️ ⚠️ 项目构建失败 ⚠️ ⚠️ ⚠️&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始导出ipa文件&quot;</span><br><span class=\"line\"># 导出ipa文件</span><br><span class=\"line\">xcodebuild -exportArchive -archivePath $&#123;export_archive_path&#125; \\</span><br><span class=\"line\">-exportPath $&#123;export_ipa_path&#125; \\</span><br><span class=\"line\">-destination generic/platform=ios \\</span><br><span class=\"line\">-exportOptionsPlist $&#123;export_options_plist_path&#125; \\</span><br><span class=\"line\">-allowProvisioningUpdates</span><br><span class=\"line\"># 默认导出ipa文件路径</span><br><span class=\"line\">export_ipa_name=$export_ipa_path$package_scheme_name&quot;.ipa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断是否有这个导出ipa文件</span><br><span class=\"line\">if [ -e $export_ipa_name ]; then</span><br><span class=\"line\">    # 更改名称为 scheme_version.ipa scheme名称为工程名称，version为svn最后提交的版本</span><br><span class=\"line\">    mv $export_ipa_name $export_ipa_path$ipa_name</span><br><span class=\"line\">    # 将当前版本设为已打包状态</span><br><span class=\"line\">    echo lastestBuildVersion=$SVN_REVISION &gt; $package_root_path&quot;result.txt&quot;</span><br><span class=\"line\">    echo &quot;🎉 🎉 🎉 导出 $&#123;ipa_name&#125;.ipa 包成功 🎉 🎉 🎉&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;❌ ❌ ❌ 导出 $&#123;ipa_name&#125;.ipa 包失败 ❌ ❌ ❌&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出打包总用时</span><br><span class=\"line\">echo &quot;本次打包总耗时: $&#123;SECONDS&#125;s&quot;</span><br></pre></td></tr></table></figure>\n\n<p>是不是有点头晕哇，我是头痛啊🤗🤗，玩过使用<strong>Jenkins</strong>脚本自动打包的人看完这个应该知道我的曲线救国方式了，有的同学肯定还在😳😳or🤔🤔。我们在<strong>重头戏</strong>中讲🤗🤗。</p>\n<h3 id=\"重头戏\"><a href=\"#重头戏\" class=\"headerlink\" title=\"重头戏\"></a>重头戏</h3><p>看风格我就不是开车的人，因为开车哪来这么多前戏是吧？🤔🤔，开始剥丝抽茧啦。</p>\n<p>前面说到在<strong>Jenkins</strong>中没有类似<strong>Git</strong>这样的提交代码自动打包的钩子插件。而我们使用<strong>Jenkins</strong>的目的就是为了释放程序员的👐，留着更多时间干正事，如果不能实现提交自动打包那有无<strong>Jenkins</strong>都一样了，还不如自己写个脚本打包呢，是吧？如果是你你会怎么做呢？</p>\n<p>我们知道Jenkins有个定期执行任务的选项，我们只需填上参数：H/2 * * * *  然后就会每两分钟执行一次，是不是想说为啥不设置1分钟，我也想哇，<strong>Jenkins</strong>不让啊😞😞。但是总不能让这家伙每两分钟一直打吧，覆盖还好，但是每两分钟就有一个新的安装包上传至测试服务器也不好吧，感觉会被测试人员打屎😱😱。那么我们就需要解决这个打断打包的条件🤔。既不能在工程中设置，不然<strong>Jenkins</strong>每次执行任务就覆盖了，也就是只能在打包电脑上保存一个状态。那么很好解决啦，我们只需要在脚本中创建一个文件来记录上次打包的<strong>SVN_REVISION</strong>，就能让脚本读取文件记录判断是否已经打过包了，没有打过包才执行程序，否则退出程序。😉😉现在想想是不是很简单哇，然后就可以尽情的哒哒哒。</p>\n<p>使用FTP上传至测试服务器这部分该如何解决呢？因为涉及到可变参数，脚本那么差的我只能使用土办法，一招一招来，干到不服为止😁😁。这部分脚本是上面那长串代码的末尾后的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">############################上传部分#####################################</span><br><span class=\"line\"></span><br><span class=\"line\">function createUploadShell()&#123;</span><br><span class=\"line\">    touch upload.sh</span><br><span class=\"line\">    chmod -R 777 upload.sh</span><br><span class=\"line\">    echo &quot;cd $&#123;package_archive_path&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;ftp -i -n -v &lt;&lt; !&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;open 117.xx.xxx.xxx&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;user oymuzi xxxx&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;cd ./$&#123;upload_dir_path&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    current_date=&quot;$(date +%Y%m%d%H%M%S)&quot;</span><br><span class=\"line\">    ipa_new_name=$package_scheme_name&quot;_&quot;$current_date&quot;.ipa&quot;</span><br><span class=\"line\">    echo &quot;binary&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;put $&#123;upload_volumes_name&#125;$&#123;package_archive_path&#125;$&#123;ipa_name&#125; ./$&#123;ipa_new_name&#125;&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;close&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;bye&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">    echo &quot;!&quot; &gt;&gt; upload.sh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $package_archive_path</span><br><span class=\"line\">createUploadShell</span><br><span class=\"line\">echo &quot;创建上传脚本成功&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;🚀 🚀 🚀 开始上传至云端  🚀 🚀 🚀&quot;</span><br><span class=\"line\">sh upload.sh</span><br><span class=\"line\">echo &quot;上传至云端完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f upload.sh</span><br></pre></td></tr></table></figure>\n\n<p>对，就是这么feel 倍爽，大佬可以自己进行更改脚本。其中一点就是使用FTP命令必须使用<code>ftp -i -n -v &lt;&lt; !  你想要的执行的FTP命令  !</code>。至于上传公司服务器还是蒲公英等平台，这个可以根据各自公司的规则吧，自己进行修改哈。</p>\n<p>源码地址：<a href=\"https://github.com/oymuzi/OMPackaging\" target=\"_blank\" rel=\"noopener\">OMPackaging</a>(注：此demo仅为了展示源码，按照源码和文章所说的办法设置环境即可正常打包)</p>\n<h3 id=\"言归正传\"><a href=\"#言归正传\" class=\"headerlink\" title=\"言归正传\"></a>言归正传</h3><p>利用<strong>Jenkins</strong>的定死执行任务功能，在本地保存一个打包的状态，然后就能每次提交代码后进行自动打包，有1-2分钟的延迟，而且要执行打包必须确保配置文件中的<code>is_need_package</code>为true并提交一次代码。在上传至测试服务器，测试人员就能直接下载安装。这个方案虽然有些延迟，但是解决了自动打包的问题。</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixinyi21cn/article/details/79151620\" target=\"_blank\" rel=\"noopener\">Mac shell 上传文件(在shell中使用FTP命令)</a></p>\n<p><a href=\"https://developer.apple.com/library/archive/technotes/tn2339/_index.html\" target=\"_blank\" rel=\"noopener\">Building from the Command Line with Xcode FAQ</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}